#!/bin/bash
clear 

if [ "$#" -ne 1 ] 
then
	echo "USAGE: $(basename $0) <version>"
	echo "Example: $(basename $0) v4"
	echo "Example: $(basename $0) gold (this is required for use by packer)"
	exit
elif [ $1 == "help" ] 
then
	echo "USAGE: $(basename $0) <version>"
	echo "Example: $(basename $0) v4"
	echo "Example: $(basename $0) gold (this is required for use by packer)"
	exit
fi

ISODIR=/mnt/d/ISOs
VERSION=$1
RHELISO=rhel-8.6-x86_64-dvd.iso
CUSTOMISO=$ISODIR/custom/$VERSION-$RHELISO

if [ -f $CUSTOMISO ] 
then
	echo "ERROR: file already exists"
	exit
fi

if [ ! -d /cdrom/rhel-8.6 ] 
then
	echo "Creating native ISO mountpoint"
	sudo mkdir /cdrom/rhel-8.6
fi

if [ ! -f $ISODIR/$RHELISO ]
then
	echo "ERROR: Cannot find native rhel 8.6 iso"
	exit
fi

echo "1. Mounting native RHEL 8.6 iso at /cdrom/rhel-8.6"
sudo mount -o loop $ISODIR/$RHELISO /cdrom/rhel-8.6/ 2>/dev/null
echo
df -h /cdrom/rhel-8.6
echo

echo "2. Synchronising content to temporary build location"
sudo rsync -qav /cdrom/rhel-8.6/ /tmp/rhel86/
echo

echo "3. Customise syslinux bootloader menu"
sudo cp /mnt/c/users/user/desktop/kickstart/isolinux/isolinux.cfg /tmp/rhel86/isolinux/isolinux.cfg
echo

echo "4. Insert latest ks.cfg"
sudo cp /mnt/c/users/user/desktop/kickstart/ks.cfg /tmp/rhel86/ks.cfg
echo

echo "5. Prepare to create customised ISO"
cd /tmp/rhel86
ROOT=$(awk -F: '$1 ~/root/ {print$2}' /mnt/c/users/user/desktop/kickstart/.creds)
sed -i "s|^rootpw.*$|rootpw --iscrypted $ROOT|g" /tmp/rhel86/ks.cfg.git 

VAGRANT=$(awk -F: '$1 ~/vagrant/ {print$2}' /mnt/c/users/user/desktop/kickstart/.creds)
sed -i "s|^user --name=vagrant.*$|user --name=vagrant --iscrypted --password=$VAGRANT --gid=500 --uid=5000 --groups=wheel|g" /tmp/rhel86/ks.cfg
echo

echo "6. Creating customised ISO"
sudo mkisofs -o $CUSTOMISO -q -b isolinux/isolinux.bin -J -R -l -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot -graft-points -joliet-long -V "RHEL-8.6 CUSTOM" .
echo

echo "7. Implanting md5 checksum"
implantisomd5 --force --supported-iso $CUSTOMISO
echo

echo "8. Obtaining md5 checksum"
md5sum $CUSTOMISO | awk '{print$1}' > $CUSTOMISO.md5
echo
